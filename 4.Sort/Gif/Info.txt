Bubble Sort
===========
Bubble sort, sometimes referred to as sinking sort, is a simple sorting algorithm that 
repeatedly steps through the list to be sorted, compares each pair of adjacent items and 
swaps them if they are in the wrong order. 

The pass through the list is repeated until no swaps are needed, which indicates that the list is sorted. 
The algorithm, which is a comparison sort, is named for the way smaller elements "bubble" to the top of the list.

Although the algorithm is simple, it is too slow and impractical for most problems even when 
compared to insertion sort.
 
It can be practical if the input is usually in sort order but may occasionally have some 
out-of-order elements nearly in position.

Heap Sort
==========
Heap is a special tree-based data structure. A binary tree is said to follow a heap data structure if

1.It is a complete binary tree
2.All nodes in the tree follow the property that they are greater than their children i.e.the largest element is 
  at the root and both its children and smaller than the root and so on.Such a heap is called a max-heap.If instead 
  all nodes are smaller than their children, it is called a min-heap

Given an array

1.Arrange the numbers in Binary tree
2.For Max-HEAP start by heapifying the lowest smallest trees and gradually move up until we reach the root element.
3.When tree satisfies Max-Heap property, then the largest item is stored at the root node.
4.Remove the root element and put at the end of the array (nth position) 
5.Put the last item of the tree (heap) at the vacant place.
6.Reduce the size of the heap by 1 and heapify the root element again so that we have highest element at root.
The process is repeated until all the items of the list is sorted.

Selection Sort
=====================
Selection sort algorithm starts by compairing first two elements of an array and swapping if necessary, 
i.e., if you want to sort the elements of array in ascending order and if the first element is greater 
than second then, you need to swap the elements but, if the first element is smaller than second, 
leave the elements as it is. 
Then, again first element and third element are compared and swapped if necessary. 
This process goes on until first and last element of an array is compared. 
This completes the first step of selection sort.

If there are n elements to be sorted then, the process mentioned above should be repeated 
n-1 times to get required result.But, for better performance, in second step, comparison starts from second element 
because after first step, the required number is automatically placed at the first 
(i.e, In case of sorting in ascending order, smallest element will be at first and in case of sorting in 
descending order, largest element will be at first.). 

Similarly, in third step, comparison starts from third element and so on. 

Insertion Sort
==============
1 The second element of an array is compared with the elements that appears before it (only first element in this case).
   If the second element is smaller than first element, second element is inserted in the position of first element. 
   After first step, first two elements of an array will be sorted.
2 The third element of an array is compared with the elements that appears before it (first and second element). 
    If third element is smaller than first element, it is inserted in the position of first element. 
    If third element is larger than first element but, smaller than second element, it is inserted in the 
      position of second element. 
    If third element is larger than both the elements, it is kept in the position as it is. 
  After second step, first three elements of an array will be sorted.
3 Similary, the fourth element of an array is compared with the elements that appears before 
    it (first, second and third element) and the same procedure is applied and that element is inserted 
    in the proper position. 
  After third step, first four elements of an array will be sorted.

If there are n elements to be sorted, Then, this procedure is repeated n-1 times to get sorted list of array.